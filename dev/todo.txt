New:

Important:
- Description
- Nasty liberty bugs
    - Restart in debug mode - all is OK
    - Restart in debug mode again
        - If the previous debug session is still running, it won't close until WELL after Starting - Debug state. You can have 2 debug sessions on the same project for like 30 seconds.
            - After this, the old session will get closed, the new one will work fine, and the server will go Debugging.
        - If you killed the previous debug session, debugger connects, then connection get closed. Subsequent attach attempts fail with 'connection closed'
    - Restart in debug mode a 3rd time - all is OK again
    - Debug mode -> Run mode
        - Project will hang in [Starting], even though startMode = run and there is no debug port set (seems Microclimate is doing everything right)
        - Restarting again fixes it
- Disable/Enable autobuild instead of toggle, and add Validate when autobuild is disabled
- Should give user a way to remove project logs from output view

Annoying Release Stuff:
- Icons
- Copyrights
- Open Source-ability
    - Be nice
    - Add file headers and generally improve code documentation

Less Important:
- Should always show some status bar message during restart.
    - right now, after Stopped, nothing is shown until the socket receives the restart success
- Test Build and Disable/Enable commands
- Show command that's running in promptForResource
- Expose log file location to user (but where?)
- Tests
    - Debug, restart tests are good
    - Would be great to get coverage for other commands - but for most of them, it's hard to test if the API calls worked
- WebView for Overview page
    - Discuss with Portal creating an endpoint which sends a simple HTML page with NO <link rel>s with all the project info
        - Client (IDE) can request which stylesheet should be used for rendering (or provide the stylesheet itself).
        - Eclipse, VSCode dark, VSCode light, etc.
- Add .code-workspace file to project template and/or to microclimate-workspace
    - Recommend this extension

Backlog:
    - Telemetry
        - https://www.npmjs.com/package/amplitude
        - Considerations for open-source
    - Why is there no linting for Node projects?
        - Theia does not support eslint.
            - Issue to add this support: https://github.com/theia-ide/theia-apps/issues/65
            - Can still run eslint in the terminal
        - To get eslint to run WITHIN vscode without the user having to take action, we have to add an eslintrc to our template project
        - eg https://github.ibm.com/timetchells/node-test/blob/master/.eslintrc.json
        - If we have this file in the WORKSPACE ROOT (ie, won't work if microclimate-workspace is the root), then eslint will work.
        - See ~/Documents/*linting.png
        - We should document this, at the very least.
        - ACTION:
            - Bring it up on planning-languages, adding least-restrictive-as-possible .eslintrc to node template
    - Colors
        - Super annoying to have ANSI color escapes in app output
            - Applies to Eclipse and manual 'docker logs' too
            - OTOH we are rendering the color in the web UI, so we can't just pass --no-color to nodemon
        - https://github.com/drudru/ansi_up

https://github.com/Microsoft/java-debug/blob/master/com.microsoft.java.debug.core/src/main/java/com/microsoft/java/debug/core/protocol/Requests.java#L274

- Extension for ANSI colors in OutputStreams using ansi_up
- Extension for string externalization
    - Both detecting strings that should be externalized, and ensuring proper parameters are passed to the translation function
    - ie if there are two {{ placeholder }}s in the string, two parameters should be provided to t, and the key names should match the placeholders
    - unused or missing strings before runtime
- Extension for clearing unused imports